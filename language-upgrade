<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Food Spot App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* General body styling */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c; /* Dark slate background */
            color: #e2e8f0; /* Light gray text */
        }
        /* Main container styling */
        .container {
            max-width: 1200px; /* Increased max-width for better layout */
            margin: 0 auto;
            padding: 1.5rem;
        }
        /* Kiosk menu item card styling */
        .menu-item-card {
            background-color: #2d3748; /* Darker gray for cards */
            border-radius: 0.75rem;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease-in-out;
        }
        .menu-item-card:hover {
            transform: translateY(-5px);
        }
        /* Modal and modal content styling */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 100; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0, 0, 0, 0.7); /* Black w/ opacity */
            align-items: center;
            justify-content: center;
        }
        .modal-content {
            background-color: #2d3748;
            margin: auto;
            padding: 2.5rem;
            border-radius: 1rem;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
            position: relative;
        }
        .close-button {
            position: absolute;
            top: 1rem;
            right: 1rem;
            font-size: 1.8rem;
            font-weight: bold;
            color: #cbd5e0;
            cursor: pointer;
            transition: color 0.2s;
        }
        .close-button:hover {
            color: #e2e8f0;
        }
        .copy-button {
            background-color: #48bb78; /* Green-500 */
            color: #1a202c;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: bold;
            transition: background-color 0.2s ease-in-out;
        }
        .copy-button:hover {
            background-color: #38a169; /* Green-600 */
        }
        .payment-link {
            background-color: #4c51bf; /* Indigo-600 or similar for contrast */
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: bold;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s ease-in-out;
            margin-top: 0.5rem;
            width: 100%; /* Full width for block display */
            text-align: center;
        }
        .payment-link:hover {
            background-color: #3e4299;
        }
        /* Back button styling */
        .back-btn {
            position: absolute;
            top: 1rem;
            left: 1rem;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            background-color: #4a5568; /* Gray-700 */
            color: white;
            border-radius: 0.5rem;
            font-weight: bold;
            transition: background-color 0.2s ease-in-out;
            z-index: 10;
        }
        .back-btn:hover {
            background-color: #2d3748; /* Gray-800 */
        }
        /* Admin dashboard column styling */
        .admin-column {
            background-color: #2d3748;
            padding: 1.5rem;
            border-radius: 0.75rem;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        .admin-column h3 {
            text-align: center;
            font-size: 1.5rem;
            font-weight: bold;
            color: #cbd5e0;
            border-bottom: 1px solid #4a5568;
            padding-bottom: 0.75rem;
            margin-bottom: 1rem;
        }
        /* Admin order card styling */
        .admin-order-card {
            background-color: #4a5568;
            padding: 1rem;
            border-radius: 0.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .admin-order-card .order-items-list {
            list-style: none;
            padding-left: 0;
            margin-top: 0.5rem;
            font-size: 0.875rem;
            color: #a0aec0;
        }
        .admin-order-card .order-items-list li {
            margin-bottom: 0.25rem;
        }
        /* Admin button styling for statuses */
        .admin-order-card .status-buttons button {
            padding: 0.4rem 0.8rem;
            font-size: 0.75rem;
            border-radius: 0.375rem;
            font-weight: bold;
            transition: background-color 0.2s;
        }
        .admin-order-card .status-buttons .btn-in-progress {
            background-color: #f6ad55; /* Orange */
            color: #2d3748;
        }
        .admin-order-card .status-buttons .btn-in-progress:hover {
            background-color: #ed8936;
        }
        .admin-order-card .status-buttons .btn-completed {
            background-color: #48bb78; /* Green */
            color: #2d3748;
        }
        .admin-order-card .status-buttons .btn-completed:hover {
            background-color: #38a169;
        }
        .admin-order-card .status-buttons .btn-revert {
            background-color: #a0aec0; /* Gray */
            color: #2d3748;
        }
        .admin-order-card .status-buttons .btn-revert:hover {
            background-color: #718096;
        }
    </style>
</head>
<body class="bg-gray-900 min-h-screen flex items-center justify-center">

    <div id="app-container" class="min-h-screen w-full flex flex-col">

        <div id="start-page" class="flex-1 flex flex-col items-center justify-center text-center p-4">
            <div class="container text-center p-8 bg-gray-800 rounded-2xl shadow-2xl max-w-lg mx-auto">
                <div class="relative w-full mb-4 flex justify-end">
                    <select id="language-select" class="bg-gray-700 border border-gray-600 text-white rounded-lg p-2 text-sm">
                        <option value="en">English</option>
                        <option value="es">Español</option>
                        <option value="fr">Français</option>
                    </select>
                </div>
                <h1 id="start-page-title" class="text-5xl font-extrabold text-yellow-400 mb-8" data-i18n="startPageTitle">Welcome to The Food Spot App!</h1>
                <p id="start-page-tagline" class="text-gray-300 text-xl mb-10" data-i18n="startPageTagline">Please choose your role to continue:</p>
                <div class="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-6 justify-center">
                    <button id="show-kiosk-btn" class="px-8 py-4 bg-indigo-600 text-white font-bold rounded-xl shadow-lg hover:bg-indigo-700 transition-transform duration-300 transform hover:scale-105 text-lg" data-i18n="customerKioskButton">
                        <i class="fas fa-utensils mr-2"></i> Customer Kiosk
                    </button>
                    <button id="show-admin-btn" class="px-8 py-4 bg-purple-600 text-white font-bold rounded-xl shadow-lg hover:bg-purple-700 transition-transform duration-300 transform hover:scale-105 text-lg" data-i18n="adminDashboardButton">
                        <i class="fas fa-user-shield mr-2"></i> Admin Dashboard
                    </button>
                </div>
            </div>
        </div>

        <div id="food-kiosk-page" class="flex-1 hidden relative">
            <button id="back-to-start-kiosk-btn" class="back-btn" data-i18n="backToStart"><i class="fas fa-arrow-left mr-2"></i> Back to Start</button>
            <header class="bg-gray-800 py-6 shadow-lg">
                <div class="container text-center">
                    <h1 id="kiosk-title" class="text-4xl font-extrabold text-yellow-400" data-i18n="kioskTitle">The Food Spot</h1>
                    <p id="kiosk-tagline" class="text-gray-400 text-lg mt-2" data-i18n="kioskTagline">Fresh, Fast, and Delicious!</p>
                </div>
            </header>
            <main class="container mt-8 grid grid-cols-1 lg:grid-cols-3 gap-8">
                <section class="lg:col-span-2">
                    <h2 id="kiosk-menu-title" class="text-3xl font-bold text-indigo-400 mb-6 text-center lg:text-left" data-i18n="menuTitle">Our Delicious Menu</h2>
                    <div id="menu-items-container" class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        </div>
                </section>
                <aside class="lg:col-span-1 bg-gray-800 p-6 rounded-xl shadow-lg h-fit sticky top-8">
                    <h2 class="text-3xl font-bold text-green-400 mb-6 text-center" data-i18n="yourOrderTitle">Your Order</h2>
                    <div id="order-list" class="space-y-4 mb-6 min-h-[100px]">
                        <p id="empty-cart-message" class="text-gray-500 text-center" data-i18n="emptyCartMessage">Your cart is empty. Add some delicious items!</p>
                    </div>
                    <div class="border-t border-gray-700 pt-4 mt-4">
                        <div class="flex justify-between items-center mb-4">
                            <span class="text-xl font-bold text-gray-300" data-i18n="totalLabel">Total:</span>
                            <span id="order-total" class="text-3xl font-extrabold text-yellow-300">$0.00</span>
                        </div>
                        <button id="complete-order-btn" class="w-full py-3 bg-indigo-600 text-white font-bold rounded-lg shadow-md hover:bg-indigo-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed" data-i18n="completeOrderButton">
                            Complete Order
                        </button>
                    </div>
                </aside>
            </main>
            <footer class="bg-gray-800 py-6 mt-auto text-center text-gray-400">
                <p data-i18n="footerText">&copy; 2025 The Food Spot. All rights reserved.</p>
            </footer>
        </div>
        
        <div id="order-menu-page" class="hidden flex-1 flex flex-col items-center justify-center p-4">
            <div class="container text-center p-8 bg-gray-800 rounded-2xl shadow-2xl max-w-lg mx-auto">
                <h1 class="text-4xl font-extrabold text-yellow-400 mb-4" data-i18n="orderPlacedTitle">Order Placed!</h1>
                <p class="text-xl text-gray-300 mb-6" data-i18n="paymentInstructions">Your order has been sent to the kitchen. Please choose a payment provider below.</p>
                <div id="payment-providers-container" class="grid grid-cols-1 gap-4 mb-6">
                    </div>
                <div id="payment-link-container" class="text-center mt-6 hidden">
                    <p class="text-gray-400 mb-2" data-i18n="useButtonToPay">Use the button below to pay for your order:</p>
                    <a id="payment-link" href="#" target="_blank" class="payment-link flex items-center justify-center gap-2" data-i18n="goToPayment">
                        <i class="fas fa-external-link-alt"></i>
                        Go to Payment
                    </a>
                </div>
                <button id="start-new-order-btn" class="mt-8 px-6 py-3 bg-green-500 text-white font-bold rounded-lg shadow-md hover:bg-green-600 transition-colors" data-i18n="startNewOrderButton">
                    Start a New Order
                </button>
            </div>
        </div>


        <div id="admin-dashboard-page" class="flex-1 hidden flex flex-col p-4">
            <div class="container bg-gray-800 p-8 rounded-2xl shadow-2xl w-full mx-auto">
                <button id="back-to-start-admin-btn" class="back-btn mb-6" data-i18n="backToStart"><i class="fas fa-arrow-left mr-2"></i> Back to Start</button>
                <h1 class="text-4xl font-extrabold text-purple-400 mb-6 text-center" data-i18n="adminDashboardTitle">Admin Dashboard</h1>
                
                <div id="admin-login-section" class="text-center mb-8">
                    <p class="text-gray-300 text-lg mb-4" data-i18n="adminLoginPrompt">Enter PIN to access the Admin Dashboard:</p>
                    <input type="password" id="admin-pin-input" class="w-full max-w-xs p-3 rounded-lg bg-gray-700 border border-gray-600 text-white text-center focus:outline-none focus:ring-2 focus:ring-purple-500 mb-4" placeholder="15-digit PIN">
                    <button id="admin-login-submit-btn" class="px-6 py-3 bg-purple-600 text-white font-bold rounded-lg hover:bg-purple-700 transition-colors" data-i18n="loginButton">
                        Login
                    </button>
                    <p id="admin-login-message" class="text-red-400 mt-4 hidden" data-i18n="incorrectPinMessage">Incorrect PIN. Please try again.</p>
                </div>

                <div id="admin-dashboard-content" class="hidden">

                    <div class="bg-gray-700 p-6 rounded-xl shadow-lg mb-8">
                        <h2 class="text-3xl font-bold text-yellow-400 mb-4 text-center" data-i18n="storeTextManagementTitle">Store Text Management</h2>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <label for="store-title-input" class="block text-sm font-medium text-gray-400 mb-1" data-i18n="storeTitleLabel">Store Title</label>
                                <input type="text" id="store-title-input" class="w-full p-2 rounded bg-gray-600 border border-gray-500 text-white" data-i18n-placeholder="storeTitlePlaceholder" placeholder="e.g., The Food Spot">
                            </div>
                            <div>
                                <label for="store-tagline-input" class="block text-sm font-medium text-gray-400 mb-1" data-i18n="taglineLabel">Tagline</label>
                                <input type="text" id="store-tagline-input" class="w-full p-2 rounded bg-gray-600 border border-gray-500 text-white" data-i18n-placeholder="taglinePlaceholder" placeholder="e.g., Fresh, Fast, Delicious!">
                            </div>
                            <div>
                                <label for="menu-title-input" class="block text-sm font-medium text-gray-400 mb-1" data-i18n="menuTitleLabel">Menu Title</label>
                                <input type="text" id="menu-title-input" class="w-full p-2 rounded bg-gray-600 border border-gray-500 text-white" data-i18n-placeholder="menuTitlePlaceholder" placeholder="e.g., Our Delicious Menu">
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-gray-700 p-6 rounded-xl shadow-lg mb-8">
                        <h2 class="text-3xl font-bold text-yellow-400 mb-4 text-center" data-i18n="menuManagementTitle">Menu Management</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-gray-600 p-4 rounded-lg">
                                <h3 id="item-form-title" class="text-xl font-bold mb-3 text-center border-b border-gray-500 pb-2" data-i18n="addItemTitle">Add New Menu Item</h3>
                                <div class="space-y-4">
                                    <input type="text" id="item-id" class="hidden">
                                    <input type="text" id="item-name" data-i18n-placeholder="itemNamePlaceholder" placeholder="Item Name" class="w-full p-2 rounded bg-gray-700 border border-gray-500 text-white" required>
                                    <input type="number" id="item-price" data-i18n-placeholder="itemPricePlaceholder" placeholder="Price (e.g., 9.99)" step="0.01" min="0" class="w-full p-2 rounded bg-gray-700 border border-gray-500 text-white" required>
                                    <textarea id="item-description" data-i18n-placeholder="itemDescriptionPlaceholder" placeholder="Description" rows="3" class="w-full p-2 rounded bg-gray-700 border border-gray-500 text-white" required></textarea>
                                    
                                    <div class="space-y-2">
                                        <div>
                                            <label for="item-image-url" class="block text-xs font-medium text-gray-400 mb-1" data-i18n="itemImageUrlLabel">Enter an image URL:</label>
                                            <input type="url" id="item-image-url" data-i18n-placeholder="itemImageUrlPlaceholder" placeholder="e.g., https://placehold.co/..." class="w-full p-2 rounded bg-gray-700 border border-gray-500 text-white">
                                        </div>
                                        <div id="image-preview" class="mt-4 hidden">
                                            <img src="" class="max-w-full h-auto rounded-lg shadow-md mx-auto" data-i18n-alt="imagePreviewAlt" alt="Image Preview">
                                        </div>
                                    </div>
                                    
                                    <div class="flex gap-2">
                                        <button id="save-item-btn" class="w-full py-3 bg-green-500 text-white font-bold rounded-lg hover:bg-green-600 transition-colors" data-i18n="addItemButton">
                                            <i class="fas fa-plus mr-2"></i> Add Item
                                        </button>
                                        <button id="cancel-edit-btn" class="w-full py-3 bg-gray-500 text-white font-bold rounded-lg hover:bg-gray-600 transition-colors hidden" data-i18n="cancelButton">
                                            Cancel
                                        </button>
                                    </div>
                                    <p id="item-form-message" class="text-center text-red-400 hidden" data-i18n="itemFormMessage"></p>
                                </div>
                            </div>

                            <div class="bg-gray-600 p-4 rounded-lg">
                                <h3 class="text-xl font-bold mb-3 text-center border-b border-gray-500 pb-2" data-i18n="currentItemsTitle">Current Menu Items</h3>
                                <div id="admin-menu-list" class="space-y-3 max-h-96 overflow-y-auto pr-2">
                                    <p id="no-menu-items-message" class="text-gray-400 text-sm text-center" data-i18n="noMenuItemsMessage">No menu items added yet.</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="bg-gray-700 p-6 rounded-xl shadow-lg mb-8">
                        <h2 class="text-3xl font-bold text-yellow-400 mb-4 text-center" data-i18n="paymentProviderManagementTitle">Payment Provider Management</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-gray-600 p-4 rounded-lg">
                                <h3 class="text-xl font-bold mb-3 text-center border-b border-gray-500 pb-2" data-i18n="addProviderTitle">Add New Provider</h3>
                                <div class="space-y-4">
                                    <input type="text" id="provider-name" data-i18n-placeholder="providerNamePlaceholder" placeholder="Provider Name (e.g., Stripe, PayPal)" class="w-full p-2 rounded bg-gray-700 border border-gray-500 text-white" required>
                                    <input type="url" id="provider-link" data-i18n-placeholder="providerLinkPlaceholder" placeholder="Payment Link (e.g., https://stripe.com/...)" class="w-full p-2 rounded bg-gray-700 border border-gray-500 text-white" required>
                                    <div class="flex gap-2">
                                        <button id="add-provider-btn" class="w-full py-3 bg-indigo-500 text-white font-bold rounded-lg hover:bg-indigo-600 transition-colors" data-i18n="addProviderButton">
                                            <i class="fas fa-user-plus mr-2"></i> Add Provider
                                        </button>
                                    </div>
                                    <p id="provider-form-message" class="text-center text-red-400 hidden" data-i18n="providerFormMessage"></p>
                                </div>
                            </div>

                            <div class="bg-gray-600 p-4 rounded-lg">
                                <h3 class="text-xl font-bold mb-3 text-center border-b border-gray-500 pb-2" data-i18n="currentProvidersTitle">Current Payment Providers</h3>
                                <div id="providers-list" class="space-y-3 max-h-96 overflow-y-auto pr-2">
                                    <p id="no-providers-message" class="text-gray-400 text-sm text-center" data-i18n="noProvidersMessage">No providers added yet.</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mt-8">
                        <h2 class="text-3xl font-bold text-green-400 mb-4" data-i18n="orderStatusTitle">Order Status Overview</h2>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                            <div class="admin-column">
                                <h3 data-i18n="pendingPaymentsTitle">Pending Payments</h3>
                                <div id="new-orders-list-admin" class="space-y-4 max-h-96 overflow-y-auto pr-2">
                                    <p class="text-gray-500 text-center text-sm" id="no-new-orders" data-i18n="noNewOrdersMessage">No new orders.</p>
                                </div>
                            </div>
                            <div class="admin-column">
                                <h3 data-i18n="inProgressTitle">Orders In Progress</h3>
                                <div id="in-progress-orders-list-admin" class="space-y-4 max-h-96 overflow-y-auto pr-2">
                                    <p class="text-gray-500 text-center text-sm" id="no-in-progress-orders" data-i18n="noInProgressOrdersMessage">No orders in progress.</p>
                                </div>
                            </div>
                            <div class="admin-column">
                                <h3 data-i18n="completedOrdersTitle">Completed/Delivered Orders</h3>
                                <div id="completed-orders-list-admin" class="space-y-4 max-h-96 overflow-y-auto pr-2">
                                    <p class="text-gray-500 text-center text-sm" id="no-completed-orders" data-i18n="noCompletedOrdersMessage">No completed orders.</p>
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-col sm:flex-row justify-between gap-4 mt-6 border-b border-gray-700 pb-6 mb-6">
                            <button id="clear-orders-btn" class="w-full sm:w-1/2 py-3 bg-red-600 text-white font-bold rounded-lg shadow-md hover:bg-red-700 transition-colors" data-i18n="clearAllOrdersButton">
                                <i class="fas fa-trash-alt mr-2"></i> Clear All Orders
                            </button>
                            <button id="save-completed-orders-btn" class="w-full sm:w-1/2 py-3 bg-blue-400 text-white font-bold rounded-lg shadow-md hover:bg-blue-500 transition-colors" data-i18n="saveCompletedOrdersButton">
                                <i class="fas fa-save mr-2"></i> Save Completed Orders to Clipboard
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="confirmationModal" class="modal">
            <div class="modal-content text-center">
                <span class="close-button">&times;</span>
                <p class="text-xl font-bold text-gray-200 mb-4" data-i18n="confirmClearOrdersMessage">Are you sure you want to clear all orders?</p>
                <div class="flex justify-center gap-4 mt-4">
                    <button id="confirmYesBtn" class="px-6 py-2 bg-red-600 text-white font-bold rounded-lg hover:bg-red-700 transition-colors" data-i18n="yesButton">Yes</button>
                    <button id="confirmNoBtn" class="px-6 py-2 bg-gray-500 text-white font-bold rounded-lg hover:bg-gray-600 transition-colors" data-i18n="noButton">No</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const showKioskBtn = document.getElementById('show-kiosk-btn');
            const showAdminBtn = document.getElementById('show-admin-btn');
            const startPage = document.getElementById('start-page');
            const foodKioskPage = document.getElementById('food-kiosk-page');
            const orderMenuPage = document.getElementById('order-menu-page'); // New
            const adminDashboardPage = document.getElementById('admin-dashboard-page');
            const backToStartKioskBtn = document.getElementById('back-to-start-kiosk-btn');
            const backToStartAdminBtn = document.getElementById('back-to-start-admin-btn');

            const menuItemsContainer = document.getElementById('menu-items-container');
            const orderList = document.getElementById('order-list');
            const orderTotalSpan = document.getElementById('order-total');
            const emptyCartMessage = document.getElementById('empty-cart-message');
            const completeOrderBtn = document.getElementById('complete-order-btn');
            const startNewOrderBtn = document.getElementById('start-new-order-btn'); // New
            const paymentProvidersContainer = document.getElementById('payment-providers-container'); // New

            const adminPinInput = document.getElementById('admin-pin-input');
            const adminLoginSubmitBtn = document.getElementById('admin-login-submit-btn');
            const adminLoginMessage = document.getElementById('admin-login-message');
            const adminDashboardContent = document.getElementById('admin-dashboard-content');
            
            const newOrdersListAdmin = document.getElementById('new-orders-list-admin');
            const inProgressOrdersListAdmin = document.getElementById('in-progress-orders-list-admin');
            const completedOrdersListAdmin = document.getElementById('completed-orders-list-admin');
            const noNewOrders = document.getElementById('no-new-orders');
            const noInProgressOrders = document.getElementById('no-in-progress-orders');
            const noCompletedOrders = document.getElementById('no-completed-orders');
            const clearOrdersBtn = document.getElementById('clear-orders-btn');
            const saveCompletedOrdersBtn = document.getElementById('save-completed-orders-btn');
            const confirmationModal = document.getElementById('confirmationModal');
            const confirmYesBtn = document.getElementById('confirmYesBtn');
            const confirmNoBtn = document.getElementById('confirmNoBtn');
            const closeConfirmModal = confirmationModal.querySelector('.close-button');

            // Admin: Menu Management
            const itemFormTitle = document.getElementById('item-form-title');
            const itemIdInput = document.getElementById('item-id');
            const itemNameInput = document.getElementById('item-name');
            const itemPriceInput = document.getElementById('item-price');
            const itemDescriptionInput = document.getElementById('item-description');
            const itemImageUrlInput = document.getElementById('item-image-url');
            const imagePreview = document.getElementById('image-preview');
            const saveItemBtn = document.getElementById('save-item-btn');
            const cancelEditBtn = document.getElementById('cancel-edit-btn');
            const itemFormMessage = document.getElementById('item-form-message');
            const adminMenuList = document.getElementById('admin-menu-list');
            const noMenuItemsMessage = document.getElementById('no-menu-items-message');

            // Admin: Store Text Management
            const storeTitleInput = document.getElementById('store-title-input');
            const storeTaglineInput = document.getElementById('store-tagline-input');
            const menuTitleInput = document.getElementById('menu-title-input');
            const startPageTitle = document.getElementById('start-page-title');
            const kioskTitle = document.getElementById('kiosk-title');
            const kioskTagline = document.getElementById('kiosk-tagline');
            const kioskMenuTitle = document.getElementById('kiosk-menu-title');

            // Admin: Provider Management
            const providerNameInput = document.getElementById('provider-name');
            const providerLinkInput = document.getElementById('provider-link'); // New
            const addProviderBtn = document.getElementById('add-provider-btn');
            const providersList = document.getElementById('providers-list');
            const providerFormMessage = document.getElementById('provider-form-message');
            const noProvidersMessage = document.getElementById('no-providers-message');
            
            const languageSelect = document.getElementById('language-select');

            let currentOrder = [];
            const ADMIN_PIN = "123456789012345"; // 15-digit PIN

            // State variables for dynamic content
            let menuItems = [];
            let providers = [];

            // Translations
            const translations = {
                en: {
                    startPageTitle: "Welcome to The Food Spot App!",
                    startPageTagline: "Please choose your role to continue:",
                    customerKioskButton: "Customer Kiosk",
                    adminDashboardButton: "Admin Dashboard",
                    backToStart: "Back to Start",
                    kioskTitle: "The Food Spot",
                    kioskTagline: "Fresh, Fast, and Delicious!",
                    menuTitle: "Our Delicious Menu",
                    noMenuItemsAvailable: "No menu items available at this time.",
                    yourOrderTitle: "Your Order",
                    emptyCartMessage: "Your cart is empty. Add some delicious items!",
                    totalLabel: "Total:",
                    completeOrderButton: "Complete Order",
                    footerText: "&copy; 2025 The Food Spot. All rights reserved.",
                    orderPlacedTitle: "Order Placed!",
                    paymentInstructions: "Your order has been sent to the kitchen. Please choose a payment provider below.",
                    useButtonToPay: "Use the button below to pay for your order:",
                    goToPayment: "Go to Payment",
                    startNewOrderButton: "Start a New Order",
                    adminDashboardTitle: "Admin Dashboard",
                    adminLoginPrompt: "Enter PIN to access the Admin Dashboard:",
                    loginButton: "Login",
                    incorrectPinMessage: "Incorrect PIN. Please try again.",
                    storeTextManagementTitle: "Store Text Management",
                    storeTitleLabel: "Store Title",
                    storeTitlePlaceholder: "e.g., The Food Spot",
                    taglineLabel: "Tagline",
                    taglinePlaceholder: "e.g., Fresh, Fast, Delicious!",
                    menuTitleLabel: "Menu Title",
                    menuTitlePlaceholder: "e.g., Our Delicious Menu",
                    menuManagementTitle: "Menu Management",
                    addItemTitle: "Add New Menu Item",
                    itemNamePlaceholder: "Item Name",
                    itemPricePlaceholder: "Price (e.g., 9.99)",
                    itemDescriptionPlaceholder: "Description",
                    itemImageUrlLabel: "Enter an image URL:",
                    itemImageUrlPlaceholder: "e.g., https://placehold.co/...",
                    imagePreviewAlt: "Image Preview",
                    addItemButton: "Add Item",
                    updateItemButton: "Update Item",
                    cancelButton: "Cancel",
                    itemFormMessage: "Please fill in all required fields.",
                    currentItemsTitle: "Current Menu Items",
                    noMenuItemsMessage: "No menu items added yet.",
                    paymentProviderManagementTitle: "Payment Provider Management",
                    addProviderTitle: "Add New Provider",
                    providerNamePlaceholder: "Provider Name (e.g., Stripe, PayPal)",
                    providerLinkPlaceholder: "Payment Link (e.g., https://stripe.com/...)",
                    addProviderButton: "Add Provider",
                    providerFormMessage: "Please enter both a provider name and a payment link.",
                    maxProvidersMessage: "You have reached the maximum of 50 payment providers.",
                    currentProvidersTitle: "Current Payment Providers",
                    noProvidersMessage: "No providers added yet.",
                    orderStatusTitle: "Order Status Overview",
                    pendingPaymentsTitle: "Pending Payments",
                    noNewOrdersMessage: "No new orders.",
                    inProgressTitle: "Orders In Progress",
                    noInProgressOrdersMessage: "No orders in progress.",
                    completedOrdersTitle: "Completed/Delivered Orders",
                    noCompletedOrdersMessage: "No completed orders.",
                    clearAllOrdersButton: "Clear All Orders",
                    saveCompletedOrdersButton: "Save Completed Orders to Clipboard",
                    confirmClearOrdersMessage: "Are you sure you want to clear all orders?",
                    yesButton: "Yes",
                    noButton: "No",
                    copyLinkSuccess: "Payment link copied to clipboard!",
                    copyLinkFailure: "Failed to copy link. Please try again.",
                    deleteItemConfirm: "Are you sure you want to delete this menu item?",
                    deleteProviderConfirm: "Are you sure you want to delete this payment provider?",
                    noCompletedOrdersToSave: "No completed orders to save.",
                    copyOrdersSuccess: "Completed orders copied to clipboard!",
                    copyOrdersFailure: "Failed to copy orders to clipboard. Please try again."
                },
                es: {
                    startPageTitle: "¡Bienvenido a la App The Food Spot!",
                    startPageTagline: "Por favor, elija su rol para continuar:",
                    customerKioskButton: "Quiosco para Clientes",
                    adminDashboardButton: "Panel de Administración",
                    backToStart: "Volver a Inicio",
                    kioskTitle: "The Food Spot",
                    kioskTagline: "¡Fresco, Rápido y Delicioso!",
                    menuTitle: "Nuestro Delicioso Menú",
                    noMenuItemsAvailable: "No hay elementos de menú disponibles en este momento.",
                    yourOrderTitle: "Su Pedido",
                    emptyCartMessage: "Su carrito está vacío. ¡Añada algunos artículos deliciosos!",
                    totalLabel: "Total:",
                    completeOrderButton: "Completar Pedido",
                    footerText: "&copy; 2025 The Food Spot. Todos los derechos reservados.",
                    orderPlacedTitle: "¡Pedido Realizado!",
                    paymentInstructions: "Su pedido ha sido enviado a la cocina. Por favor, elija un proveedor de pago a continuación.",
                    useButtonToPay: "Use el botón de abajo para pagar su pedido:",
                    goToPayment: "Ir al Pago",
                    startNewOrderButton: "Empezar un Nuevo Pedido",
                    adminDashboardTitle: "Panel de Administración",
                    adminLoginPrompt: "Introduzca el PIN para acceder al Panel de Administración:",
                    loginButton: "Acceder",
                    incorrectPinMessage: "PIN incorrecto. Por favor, inténtelo de nuevo.",
                    storeTextManagementTitle: "Gestión de Texto de la Tienda",
                    storeTitleLabel: "Título de la Tienda",
                    storeTitlePlaceholder: "ej., The Food Spot",
                    taglineLabel: "Eslogan",
                    taglinePlaceholder: "ej., ¡Fresco, Rápido, Delicioso!",
                    menuTitleLabel: "Título del Menú",
                    menuTitlePlaceholder: "ej., Nuestro Delicioso Menú",
                    menuManagementTitle: "Gestión del Menú",
                    addItemTitle: "Añadir Nuevo Artículo",
                    itemNamePlaceholder: "Nombre del Artículo",
                    itemPricePlaceholder: "Precio (ej., 9.99)",
                    itemDescriptionPlaceholder: "Descripción",
                    itemImageUrlLabel: "Introduzca una URL de imagen:",
                    itemImageUrlPlaceholder: "ej., https://placehold.co/...",
                    imagePreviewAlt: "Vista previa de la imagen",
                    addItemButton: "Añadir Artículo",
                    updateItemButton: "Actualizar Artículo",
                    cancelButton: "Cancelar",
                    itemFormMessage: "Por favor, rellene todos los campos requeridos.",
                    currentItemsTitle: "Artículos del Menú Actuales",
                    noMenuItemsMessage: "Aún no se han añadido artículos al menú.",
                    paymentProviderManagementTitle: "Gestión de Proveedores de Pago",
                    addProviderTitle: "Añadir Nuevo Proveedor",
                    providerNamePlaceholder: "Nombre del Proveedor (ej., Stripe, PayPal)",
                    providerLinkPlaceholder: "Enlace de Pago (ej., https://stripe.com/...)",
                    addProviderButton: "Añadir Proveedor",
                    providerFormMessage: "Por favor, introduzca tanto un nombre de proveedor como un enlace de pago.",
                    maxProvidersMessage: "Ha alcanzado el máximo de 50 proveedores de pago.",
                    currentProvidersTitle: "Proveedores de Pago Actuales",
                    noProvidersMessage: "Aún no se han añadido proveedores.",
                    orderStatusTitle: "Resumen del Estado del Pedido",
                    pendingPaymentsTitle: "Pagos Pendientes",
                    noNewOrdersMessage: "No hay pedidos nuevos.",
                    inProgressTitle: "Pedidos en Curso",
                    noInProgressOrdersMessage: "No hay pedidos en curso.",
                    completedOrdersTitle: "Pedidos Completados/Entregados",
                    noCompletedOrdersMessage: "No hay pedidos completados.",
                    clearAllOrdersButton: "Borrar Todos los Pedidos",
                    saveCompletedOrdersButton: "Guardar Pedidos Completados en el Portapapeles",
                    confirmClearOrdersMessage: "¿Está seguro de que desea borrar todos los pedidos?",
                    yesButton: "Sí",
                    noButton: "No",
                    copyLinkSuccess: "¡Enlace de pago copiado al portapapeles!",
                    copyLinkFailure: "No se pudo copiar el enlace. Por favor, inténtelo de nuevo.",
                    deleteItemConfirm: "¿Está seguro de que desea eliminar este artículo del menú?",
                    deleteProviderConfirm: "¿Está seguro de que desea eliminar este proveedor de pago?",
                    noCompletedOrdersToSave: "No hay pedidos completados para guardar.",
                    copyOrdersSuccess: "¡Pedidos completados copiados al portapapeles!",
                    copyOrdersFailure: "No se pudieron copiar los pedidos al portapapeles. Por favor, inténtelo de nuevo."
                },
                fr: {
                    startPageTitle: "Bienvenue sur l'application The Food Spot!",
                    startPageTagline: "Veuillez choisir votre rôle pour continuer :",
                    customerKioskButton: "Kiosque Client",
                    adminDashboardButton: "Tableau de Bord Admin",
                    backToStart: "Retour au début",
                    kioskTitle: "The Food Spot",
                    kioskTagline: "Frais, Rapide et Délicieux !",
                    menuTitle: "Notre Délicieux Menu",
                    noMenuItemsAvailable: "Aucun élément de menu disponible pour le moment.",
                    yourOrderTitle: "Votre Commande",
                    emptyCartMessage: "Votre panier est vide. Ajoutez de délicieux articles !",
                    totalLabel: "Total :",
                    completeOrderButton: "Terminer la Commande",
                    footerText: "&copy; 2025 The Food Spot. Tous droits réservés.",
                    orderPlacedTitle: "Commande Passée !",
                    paymentInstructions: "Votre commande a été envoyée à la cuisine. Veuillez choisir un fournisseur de paiement ci-dessous.",
                    useButtonToPay: "Utilisez le bouton ci-dessous pour payer votre commande :",
                    goToPayment: "Aller au paiement",
                    startNewOrderButton: "Démarrer une Nouvelle Commande",
                    adminDashboardTitle: "Tableau de Bord Admin",
                    adminLoginPrompt: "Entrez le code PIN pour accéder au Tableau de Bord Admin :",
                    loginButton: "Connexion",
                    incorrectPinMessage: "Code PIN incorrect. Veuillez réessayer.",
                    storeTextManagementTitle: "Gestion du Texte du Magasin",
                    storeTitleLabel: "Titre du Magasin",
                    storeTitlePlaceholder: "ex., The Food Spot",
                    taglineLabel: "Slogan",
                    taglinePlaceholder: "ex., Frais, Rapide, Délicieux !",
                    menuTitleLabel: "Titre du Menu",
                    menuTitlePlaceholder: "ex., Notre Délicieux Menu",
                    menuManagementTitle: "Gestion du Menu",
                    addItemTitle: "Ajouter un Nouvel Article au Menu",
                    itemNamePlaceholder: "Nom de l'article",
                    itemPricePlaceholder: "Prix (ex., 9.99)",
                    itemDescriptionPlaceholder: "Description",
                    itemImageUrlLabel: "Entrez une URL d'image :",
                    itemImageUrlPlaceholder: "ex., https://placehold.co/...",
                    imagePreviewAlt: "Aperçu de l'image",
                    addItemButton: "Ajouter un Article",
                    updateItemButton: "Mettre à Jour l'Article",
                    cancelButton: "Annuler",
                    itemFormMessage: "Veuillez remplir tous les champs obligatoires.",
                    currentItemsTitle: "Articles de Menu Actuels",
                    noMenuItemsMessage: "Aucun article de menu n'a encore été ajouté.",
                    paymentProviderManagementTitle: "Gestion des Fournisseurs de Paiement",
                    addProviderTitle: "Ajouter un Nouveau Fournisseur",
                    providerNamePlaceholder: "Nom du Fournisseur (ex., Stripe, PayPal)",
                    providerLinkPlaceholder: "Lien de Paiement (ex., https://stripe.com/...)",
                    addProviderButton: "Ajouter un Fournisseur",
                    providerFormMessage: "Veuillez entrer un nom de fournisseur et un lien de paiement.",
                    maxProvidersMessage: "Vous avez atteint le maximum de 50 fournisseurs de paiement.",
                    currentProvidersTitle: "Fournisseurs de Paiement Actuels",
                    noProvidersMessage: "Aucun fournisseur n'a encore été ajouté.",
                    orderStatusTitle: "Aperçu de l'état des Commandes",
                    pendingPaymentsTitle: "Paiements en Attente",
                    noNewOrdersMessage: "Aucune nouvelle commande.",
                    inProgressTitle: "Commandes en Cours",
                    noInProgressOrdersMessage: "Aucune commande en cours.",
                    completedOrdersTitle: "Commandes Terminées/Livrés",
                    noCompletedOrdersMessage: "Aucune commande terminée.",
                    clearAllOrdersButton: "Effacer toutes les Commandes",
                    saveCompletedOrdersButton: "Sauvegarder les Commandes Terminées dans le Presse-papiers",
                    confirmClearOrdersMessage: "Êtes-vous sûr de vouloir effacer toutes les commandes ?",
                    yesButton: "Oui",
                    noButton: "Non",
                    copyLinkSuccess: "Lien de paiement copié dans le presse-papiers !",
                    copyLinkFailure: "Échec de la copie du lien. Veuillez réessayer.",
                    deleteItemConfirm: "Êtes-vous sûr de vouloir supprimer cet article du menu ?",
                    deleteProviderConfirm: "Êtes-vous sûr de vouloir supprimer ce fournisseur de paiement ?",
                    noCompletedOrdersToSave: "Aucune commande terminée à sauvegarder.",
                    copyOrdersSuccess: "Commandes terminées copiées dans le presse-papiers !",
                    copyOrdersFailure: "Échec de la copie des commandes dans le presse-papiers. Veuillez réessayer."
                }
            };
            
            function setLanguage(lang) {
                document.querySelectorAll('[data-i18n]').forEach(element => {
                    const key = element.dataset.i18n;
                    if (translations[lang] && translations[lang][key]) {
                        element.textContent = translations[lang][key];
                    }
                });

                document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
                    const key = element.dataset.i18n-placeholder;
                    if (translations[lang] && translations[lang][key]) {
                        element.placeholder = translations[lang][key];
                    }
                });

                document.querySelectorAll('[data-i18n-alt]').forEach(element => {
                    const key = element.dataset.i18n-alt;
                    if (translations[lang] && translations[lang][key]) {
                        element.alt = translations[lang][key];
                    }
                });

                // Manually update hardcoded text inside buttons/elements that don't have data-i18n
                document.getElementById('save-item-btn').innerHTML = `<i class="fas fa-plus mr-2"></i> ${translations[lang].addItemButton}`;
                document.getElementById('cancel-edit-btn').innerHTML = `${translations[lang].cancelButton}`;
                document.getElementById('save-item-btn').dataset.i18n = 'addItemButton'; // Set the data attribute for dynamic text

                // Special case for editing an item
                if (itemIdInput.value !== '') {
                    document.getElementById('save-item-btn').innerHTML = `<i class="fas fa-save mr-2"></i> ${translations[lang].updateItemButton}`;
                }
            }

            // Helper Functions
            function showPage(pageId) {
                const pages = ['start-page', 'food-kiosk-page', 'admin-dashboard-page', 'order-menu-page'];
                pages.forEach(id => {
                    document.getElementById(id).classList.add('hidden');
                });
                document.getElementById(pageId).classList.remove('hidden');
            }

            function updateKioskText() {
                const storeTitle = localStorage.getItem('storeTitle') || "The Food Spot";
                const tagline = localStorage.getItem('storeTagline') || "Fresh, Fast, and Delicious!";
                const menuTitle = localStorage.getItem('menuTitle') || "Our Delicious Menu";
                
                // These are user-managed, so they don't get translated
                startPageTitle.textContent = `Welcome to ${storeTitle} App!`;
                kioskTitle.textContent = storeTitle;
                kioskTagline.textContent = tagline;
                kioskMenuTitle.textContent = menuTitle;
            }

            function loadMenuItems() {
                const storedMenuItems = JSON.parse(localStorage.getItem('menuItems')) || [];
                menuItems = storedMenuItems;
                renderMenuItems();
                renderAdminMenuItems();
            }

            function saveMenuItems() {
                localStorage.setItem('menuItems', JSON.stringify(menuItems));
                renderMenuItems();
                renderAdminMenuItems();
            }

            function loadProviders() {
                const storedProviders = JSON.parse(localStorage.getItem('paymentProviders')) || [];
                providers = storedProviders;
                renderPaymentProviders();
            }

            function saveProviders() {
                localStorage.setItem('paymentProviders', JSON.stringify(providers));
                renderPaymentProviders();
            }

            function renderMenuItems() {
                menuItemsContainer.innerHTML = '';
                if (menuItems.length === 0) {
                    menuItemsContainer.innerHTML = `<p class="text-gray-400 text-center col-span-2">${translations[languageSelect.value].noMenuItemsAvailable}</p>`;
                    return;
                }
                
                menuItems.forEach(item => {
                    const menuItemCard = document.createElement('div');
                    menuItemCard.classList.add('menu-item-card', 'p-4', 'flex', 'flex-col', 'items-center', 'text-center');
                    
                    menuItemCard.innerHTML = `
                        <div class="h-40 w-full overflow-hidden rounded-md mb-4">
                            <img src="${item.imageUrl}" onerror="this.onerror=null;this.src='https://placehold.co/400x200/4a5568/e2e8f0?text=${translations[languageSelect.value].imagePreviewAlt}';" alt="${translations[languageSelect.value].imagePreviewAlt}" class="h-full w-full object-cover">
                        </div>
                        <h3 class="text-xl font-bold text-yellow-300">${item.name}</h3>
                        <p class="text-gray-400 text-sm mb-2">${item.description}</p>
                        <span class="text-2xl font-extrabold text-green-400 mb-4">$${item.price.toFixed(2)}</span>
                        <button class="add-to-cart-btn w-full py-2 bg-indigo-500 text-white rounded-lg font-bold hover:bg-indigo-600 transition-colors" data-item-id="${item.id}">
                            <i class="fas fa-cart-plus mr-2"></i> ${translations[languageSelect.value].addItemButton}
                        </button>
                    `;
                    menuItemsContainer.appendChild(menuItemCard);
                });

                document.querySelectorAll('.add-to-cart-btn').forEach(button => {
                    button.addEventListener('click', (event) => {
                        const itemId = event.target.dataset.itemId;
                        const itemToAdd = menuItems.find(item => item.id === itemId);
                        if (itemToAdd) {
                            addToOrder(itemToAdd);
                        }
                    });
                });
            }

            function addToOrder(item) {
                const existingItem = currentOrder.find(orderItem => orderItem.id === item.id);
                if (existingItem) {
                    existingItem.quantity++;
                } else {
                    currentOrder.push({ ...item, quantity: 1 });
                }
                updateOrderList();
            }

            function updateOrderList() {
                orderList.innerHTML = '';
                let total = 0;
                if (currentOrder.length === 0) {
                    emptyCartMessage.classList.remove('hidden');
                    completeOrderBtn.disabled = true;
                } else {
                    emptyCartMessage.classList.add('hidden');
                    completeOrderBtn.disabled = false;
                    currentOrder.forEach(item => {
                        total += item.price * item.quantity;
                        const orderItemDiv = document.createElement('div');
                        orderItemDiv.classList.add('flex', 'items-center', 'justify-between', 'py-2', 'px-3', 'bg-gray-700', 'rounded-lg');
                        orderItemDiv.innerHTML = `
                            <div class="flex-1">
                                <span class="text-gray-200 font-medium">${item.name}</span>
                                <span class="text-gray-400 text-sm"> x${item.quantity}</span>
                            </div>
                            <div class="flex items-center gap-2">
                                <span class="text-green-400 font-semibold">$${(item.price * item.quantity).toFixed(2)}</span>
                                <button class="remove-item-btn text-red-500 hover:text-red-600 transition-colors" data-item-id="${item.id}"><i class="fas fa-trash-alt"></i></button>
                            </div>
                        `;
                        orderList.appendChild(orderItemDiv);
                    });
                    document.querySelectorAll('.remove-item-btn').forEach(button => {
                        button.addEventListener('click', (event) => {
                            const itemId = event.target.dataset.itemId;
                            const itemIndex = currentOrder.findIndex(item => item.id === itemId);
                            if (itemIndex > -1) {
                                currentOrder.splice(itemIndex, 1);
                            }
                            updateOrderList();
                        });
                    });
                }
                orderTotalSpan.textContent = `$${total.toFixed(2)}`;
            }

            // Order management for admin dashboard
            let orders = JSON.parse(localStorage.getItem('orders')) || [];

            function saveOrders() {
                localStorage.setItem('orders', JSON.stringify(orders));
                renderAdminOrders();
            }

            function renderAdminOrders() {
                newOrdersListAdmin.innerHTML = '';
                inProgressOrdersListAdmin.innerHTML = '';
                completedOrdersListAdmin.innerHTML = '';
                
                const newOrders = orders.filter(o => o.status === 'pending');
                const inProgressOrders = orders.filter(o => o.status === 'in-progress');
                const completedOrders = orders.filter(o => o.status === 'completed');

                noNewOrders.textContent = translations[languageSelect.value].noNewOrdersMessage;
                noInProgressOrders.textContent = translations[languageSelect.value].noInProgressOrdersMessage;
                noCompletedOrders.textContent = translations[languageSelect.value].noCompletedOrdersMessage;

                noNewOrders.style.display = newOrders.length === 0 ? 'block' : 'none';
                noInProgressOrders.style.display = inProgressOrders.length === 0 ? 'block' : 'none';
                noCompletedOrders.style.display = completedOrders.length === 0 ? 'block' : 'none';

                newOrders.forEach(order => newOrdersListAdmin.appendChild(createOrderCard(order)));
                inProgressOrders.forEach(order => inProgressOrdersListAdmin.appendChild(createOrderCard(order)));
                completedOrders.forEach(order => completedOrdersListAdmin.appendChild(createOrderCard(order)));
            }

            function createOrderCard(order) {
                const card = document.createElement('div');
                card.classList.add('admin-order-card');
                
                const providerInfo = order.paymentProvider ? `<p class="text-xs text-gray-400">Payment via: ${order.paymentProvider.name}</p>` : '';
                
                card.innerHTML = `
                    <div class="flex justify-between items-center mb-2">
                        <h4 class="text-lg font-bold text-gray-100">Order #${order.orderId}</h4>
                        <span class="text-sm text-gray-400">${new Date(order.timestamp).toLocaleTimeString()}</span>
                    </div>
                    <p class="text-sm font-semibold text-yellow-300 mb-1">Total: $${order.total.toFixed(2)}</p>
                    ${providerInfo}
                    <ul class="order-items-list">
                        ${order.items.map(item => `<li>${item.name} (x${item.quantity}) - $${(item.price * item.quantity).toFixed(2)}</li>`).join('')}
                    </ul>
                    <div class="status-buttons mt-3 flex justify-end gap-2">
                        ${order.status !== 'in-progress' ? `<button data-order-id="${order.orderId}" data-status="in-progress" class="btn-in-progress">${translations[languageSelect.value].inProgressTitle}</button>` : ''}
                        ${order.status !== 'completed' ? `<button data-order-id="${order.orderId}" data-status="completed" class="btn-completed">${translations[languageSelect.value].completedOrdersTitle}</button>` : ''}
                        ${order.status === 'completed' ? `<button data-order-id="${order.orderId}" data-status="in-progress" class="btn-revert">${translations[languageSelect.value].backToStart}</button>` : ''}
                    </div>
                `;

                card.querySelectorAll('.status-buttons button').forEach(button => {
                    button.addEventListener('click', (event) => {
                        const orderId = event.target.dataset.orderId;
                        const newStatus = event.target.dataset.status;
                        updateOrderStatus(orderId, newStatus);
                    });
                });
                return card;
            }

            function updateOrderStatus(orderId, newStatus) {
                const orderIndex = orders.findIndex(o => o.orderId === orderId);
                if (orderIndex > -1) {
                    orders[orderIndex].status = newStatus;
                    saveOrders();
                }
            }

            function renderAdminMenuItems() {
                adminMenuList.innerHTML = '';
                if (menuItems.length === 0) {
                    noMenuItemsMessage.style.display = 'block';
                    return;
                }
                noMenuItemsMessage.style.display = 'none';

                menuItems.forEach(item => {
                    const listItem = document.createElement('div');
                    listItem.classList.add('bg-gray-700', 'p-3', 'rounded-lg', 'flex', 'items-center', 'gap-4');
                    listItem.innerHTML = `
                        <img src="${item.imageUrl}" class="w-12 h-12 object-cover rounded-md" onerror="this.onerror=null;this.src='https://placehold.co/48x48/4a5568/e2e8f0?text=No+Img';">
                        <div class="flex-1">
                            <p class="font-bold text-yellow-300">${item.name}</p>
                            <p class="text-sm text-gray-400">$${item.price.toFixed(2)}</p>
                        </div>
                        <div class="flex gap-2">
                            <button data-id="${item.id}" class="edit-item-btn text-blue-400 hover:text-blue-500 transition-colors"><i class="fas fa-edit"></i></button>
                            <button data-id="${item.id}" class="delete-item-btn text-red-400 hover:text-red-500 transition-colors"><i class="fas fa-trash-alt"></i></button>
                        </div>
                    `;
                    adminMenuList.appendChild(listItem);
                });

                document.querySelectorAll('.edit-item-btn').forEach(button => {
                    button.addEventListener('click', (event) => {
                        const itemId = event.target.closest('button').dataset.id;
                        editItem(itemId);
                    });
                });

                document.querySelectorAll('.delete-item-btn').forEach(button => {
                    button.addEventListener('click', (event) => {
                        const itemId = event.target.closest('button').dataset.id;
                        deleteItem(itemId);
                    });
                });
            }

            function resetItemForm() {
                itemIdInput.value = '';
                itemNameInput.value = '';
                itemPriceInput.value = '';
                itemDescriptionInput.value = '';
                itemImageUrlInput.value = '';
                imagePreview.classList.add('hidden');
                imagePreview.querySelector('img').src = '';
                itemFormTitle.textContent = translations[languageSelect.value].addItemTitle;
                saveItemBtn.innerHTML = `<i class="fas fa-plus mr-2"></i> ${translations[languageSelect.value].addItemButton}`;
                cancelEditBtn.classList.add('hidden');
                itemFormMessage.classList.add('hidden');
            }

            function editItem(id) {
                const item = menuItems.find(i => i.id === id);
                if (item) {
                    itemIdInput.value = item.id;
                    itemNameInput.value = item.name;
                    itemPriceInput.value = item.price;
                    itemDescriptionInput.value = item.description;
                    itemImageUrlInput.value = item.imageUrl;
                    itemFormTitle.textContent = `${translations[languageSelect.value].updateItemButton}: ${item.name}`;
                    saveItemBtn.innerHTML = `<i class="fas fa-save mr-2"></i> ${translations[languageSelect.value].updateItemButton}`;
                    cancelEditBtn.classList.remove('hidden');
                    
                    if (item.imageUrl) {
                        imagePreview.querySelector('img').src = item.imageUrl;
                        imagePreview.classList.remove('hidden');
                    } else {
                        imagePreview.classList.add('hidden');
                    }
                }
            }

            function deleteItem(id) {
                if (confirm(translations[languageSelect.value].deleteItemConfirm)) {
                    menuItems = menuItems.filter(item => item.id !== id);
                    saveMenuItems();
                    resetItemForm();
                }
            }
            
            saveItemBtn.addEventListener('click', (e) => {
                e.preventDefault();
                const name = itemNameInput.value.trim();
                const price = parseFloat(itemPriceInput.value);
                const description = itemDescriptionInput.value.trim();
                let imageUrl = itemImageUrlInput.value.trim();

                if (!name || isNaN(price) || !description) {
                    itemFormMessage.textContent = translations[languageSelect.value].itemFormMessage;
                    itemFormMessage.classList.remove('hidden');
                    return;
                }

                if (!imageUrl) {
                    imageUrl = 'https://placehold.co/400x200/4a5568/e2e8f0?text=No+Image';
                }
                
                const id = itemIdInput.value || Date.now().toString();
                const existingItemIndex = menuItems.findIndex(item => item.id === id);
                
                if (existingItemIndex > -1) {
                    menuItems[existingItemIndex] = { id, name, price, description, imageUrl };
                } else {
                    menuItems.push({ id, name, price, description, imageUrl });
                }
                saveMenuItems();
                resetItemForm();
            });

            cancelEditBtn.addEventListener('click', resetItemForm);
            
            // New: Payment Providers Logic
            function renderPaymentProviders() {
                paymentProvidersContainer.innerHTML = '';
                providersList.innerHTML = '';

                if (providers.length === 0) {
                    noProvidersMessage.style.display = 'block';
                    paymentProvidersContainer.innerHTML = `<p class="text-gray-400 text-center">${translations[languageSelect.value].noProvidersMessage}</p>`;
                    return;
                }
                noProvidersMessage.style.display = 'none';

                // Render for customer-facing order page
                providers.forEach(provider => {
                    const providerBtn = document.createElement('button');
                    providerBtn.textContent = provider.name;
                    providerBtn.classList.add('payment-link', 'py-3', 'px-6');
                    providerBtn.dataset.link = provider.link;
                    providerBtn.addEventListener('click', async (event) => {
                        const link = event.target.dataset.link;
                        try {
                            await navigator.clipboard.writeText(link);
                            alert(translations[languageSelect.value].copyLinkSuccess);
                        } catch (err) {
                            console.error('Failed to copy text: ', err);
                            alert(translations[languageSelect.value].copyLinkFailure);
                        }
                    });
                    paymentProvidersContainer.appendChild(providerBtn);
                });
                
                // Render for admin dashboard
                providers.forEach(provider => {
                    const listItem = document.createElement('div');
                    listItem.classList.add('bg-gray-700', 'p-3', 'rounded-lg', 'flex', 'items-center', 'justify-between', 'gap-4');
                    listItem.innerHTML = `
                        <div class="flex-1">
                            <p class="font-bold text-yellow-300">${provider.name}</p>
                            <a href="${provider.link}" target="_blank" class="text-sm text-blue-400 hover:underline truncate">${provider.link}</a>
                        </div>
                        <button data-id="${provider.id}" class="delete-provider-btn text-red-400 hover:text-red-500 transition-colors"><i class="fas fa-trash-alt"></i></button>
                    `;
                    providersList.appendChild(listItem);
                });

                document.querySelectorAll('.delete-provider-btn').forEach(button => {
                    button.addEventListener('click', (event) => {
                        const providerId = event.target.closest('button').dataset.id;
                        deleteProvider(providerId);
                    });
                });
            }

            function deleteProvider(id) {
                if (confirm(translations[languageSelect.value].deleteProviderConfirm)) {
                    providers = providers.filter(p => p.id !== id);
                    saveProviders();
                }
            }

            addProviderBtn.addEventListener('click', () => {
                const name = providerNameInput.value.trim();
                const link = providerLinkInput.value.trim();

                if (name && link) {
                    if (providers.length < 50) {
                        const newProvider = { id: Date.now().toString(), name, link };
                        providers.push(newProvider);
                        saveProviders();
                        providerNameInput.value = '';
                        providerLinkInput.value = '';
                        providerFormMessage.classList.add('hidden');
                    } else {
                        providerFormMessage.textContent = translations[languageSelect.value].maxProvidersMessage;
                        providerFormMessage.classList.remove('hidden');
                    }
                } else {
                    providerFormMessage.textContent = translations[languageSelect.value].providerFormMessage;
                    providerFormMessage.classList.remove('hidden');
                }
            });

            // Event Listeners
            showKioskBtn.addEventListener('click', () => {
                showPage('food-kiosk-page');
            });
            
            showAdminBtn.addEventListener('click', () => {
                showPage('admin-dashboard-page');
            });

            backToStartKioskBtn.addEventListener('click', () => {
                showPage('start-page');
            });

            backToStartAdminBtn.addEventListener('click', () => {
                showPage('start-page');
            });

            adminLoginSubmitBtn.addEventListener('click', () => {
                if (adminPinInput.value === ADMIN_PIN) {
                    document.getElementById('admin-login-section').classList.add('hidden');
                    adminDashboardContent.classList.remove('hidden');
                    renderAdminOrders();
                    renderAdminMenuItems();
                    loadProviders();
                    // Load and set admin text inputs
                    storeTitleInput.value = localStorage.getItem('storeTitle') || "";
                    storeTaglineInput.value = localStorage.getItem('storeTagline') || "";
                    menuTitleInput.value = localStorage.getItem('menuTitle') || "";
                } else {
                    adminLoginMessage.classList.remove('hidden');
                }
            });
            
            // New: Complete Order button
            completeOrderBtn.addEventListener('click', () => {
                if (currentOrder.length > 0) {
                    const total = currentOrder.reduce((sum, item) => sum + item.price * item.quantity, 0);
                    const orderId = Date.now();
                    orders.push({ orderId, items: currentOrder, total, status: 'pending', timestamp: new Date() });
                    saveOrders();
                    currentOrder = [];
                    updateOrderList();
                    showPage('order-menu-page');
                }
            });

            // New: Start New Order button
            startNewOrderBtn.addEventListener('click', () => {
                showPage('food-kiosk-page');
            });


            storeTitleInput.addEventListener('input', (e) => {
                localStorage.setItem('storeTitle', e.target.value);
                updateKioskText();
            });

            storeTaglineInput.addEventListener('input', (e) => {
                localStorage.setItem('storeTagline', e.target.value);
                updateKioskText();
            });

            menuTitleInput.addEventListener('input', (e) => {
                localStorage.setItem('menuTitle', e.target.value);
                updateKioskText();
            });

            clearOrdersBtn.addEventListener('click', () => {
                confirmationModal.style.display = "flex";
            });

            confirmYesBtn.addEventListener('click', () => {
                orders = [];
                saveOrders();
                confirmationModal.style.display = "none";
            });

            confirmNoBtn.addEventListener('click', () => {
                confirmationModal.style.display = "none";
            });

            closeConfirmModal.addEventListener('click', () => {
                confirmationModal.style.display = "none";
            });

            saveCompletedOrdersBtn.addEventListener('click', async () => {
                const completedOrders = orders.filter(o => o.status === 'completed');
                if (completedOrders.length === 0) {
                    alert(translations[languageSelect.value].noCompletedOrdersToSave);
                    return;
                }
                const completedOrdersText = completedOrders.map(order => {
                    const items = order.items.map(item => `  - ${item.name} (x${item.quantity})`).join('\n');
                    return `Order #${order.orderId} - Total: $${order.total.toFixed(2)}\nItems:\n${items}\nTimestamp: ${new Date(order.timestamp).toLocaleString()}\n`;
                }).join('\n' + '-'.repeat(30) + '\n');
                
                try {
                    await navigator.clipboard.writeText(completedOrdersText);
                    alert(translations[languageSelect.value].copyOrdersSuccess);
                } catch (err) {
                    console.error('Failed to copy text: ', err);
                    alert(translations[languageSelect.value].copyOrdersFailure);
                }
            });

            languageSelect.addEventListener('change', (e) => {
                const newLang = e.target.value;
                localStorage.setItem('language', newLang);
                setLanguage(newLang);
            });

            // Initial load
            const savedLang = localStorage.getItem('language') || 'en';
            languageSelect.value = savedLang;
            setLanguage(savedLang);

            updateKioskText();
            loadMenuItems();
            loadProviders();
        });
    </script>
</body>
</html>
